package dev.rubentxu.pipeline.steps.annotations

/**
 * Metadata about a step function, generated by the compiler plugin
 * and used for step discovery and validation.
 */
data class StepMetadata(
    val name: String,
    val functionName: String,
    val qualifiedName: String,
    val description: String,
    val category: StepCategory,
    val securityLevel: SecurityLevel,
    val parameters: List<StepParameter>,
    val returnType: String
)

/**
 * Metadata about a step parameter
 */
data class StepParameter(
    val name: String,
    val type: String,
    val isOptional: Boolean,
    val defaultValue: String?
)

/**
 * Marker interface for step provider implementations.
 * ServiceLoader will discover implementations of this interface.
 */
interface StepProvider {
    /**
     * Get metadata about this step
     */
    fun getStepMetadata(): StepMetadata
    
    /**
     * Get the actual step function implementation
     */
    fun getStepFunction(): suspend (Array<Any>) -> Any
}

/**
 * Exception thrown when a step validation fails
 */
class StepValidationException(
    message: String,
    val stepName: String? = null,
    cause: Throwable? = null
) : Exception(message, cause)

/**
 * Exception thrown when a step is not found in the registry
 */
class StepNotFoundException(
    val stepName: String
) : Exception("Step not found: $stepName")

/**
 * Validation result for step configuration or usage
 */
sealed class StepValidationResult {
    object Valid : StepValidationResult()
    data class Invalid(override val errors: List<String>) : StepValidationResult()
    
    val isValid: Boolean get() = this is Valid
    open val errors: List<String> get() = emptyList()
}